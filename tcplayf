#!/bin/bash


# parse command line arguments
case "$1" in

  # mount mode takes 2 arguments: tcplayf mount tc_volume mount_directory
  'mount') mode='mount'
    tc_volume=`readlink -f $2`
    mount_directory=`readlink -f $3`

    loop=`sudo losetup -f`
    tc_md5=`echo $tc_volume | md5sum | sed 's/ .*//'`
    tc_volume_name=`basename $tc_volume`.$tc_md5

    sudo losetup $loop $tc_volume &&
    sudo tcplay --map=$tc_volume_name --device=$loop &&
    sudo mount /dev/mapper/$tc_volume_name $mount_directory
    ;;

  # unmount takes 1 argument: the directory the tc_volume has been mounted to
  'unmount') mode='unmount'
    #find tcplay volume name, attached loop and mount directory
    tc_dir=$(readlink -f $2)
    tc_map=`sudo findmnt $tc_dir -o SOURCE -n`
    tc_volume_name=`basename $tc_map`

    # Find correct loop
    file_basename=`echo $tc_volume_name | sed 's/\.[[:alnum:]]*$//'`
    file_md5=`echo $tc_volume_name | sed 's/^.*\.\([[:alnum:]]*\)$/\1/'`

    loop_files=`losetup -l -O BACK-FILE -n`
    IFS=$'\n'
    for loop_file in $loop_files; do

        # Check if full path matches the mapped file
        loop_md5=`echo $loop_file | md5sum | sed 's/ .*$//'`
        if [[ $loop_md5 != $file_md5 ]]; then
            continue
        fi

        loop=`losetup -l -O NAME -n -j "$loop_file"`

        #check if mount directory is currently in use
        lsof -Fn | grep -q -x "n$tc_dir/\?" &&
            echo "Directory busy, exiting" &&
            exit

        #perform inverse operations of mount
        sudo umount "$tc_dir" &&
        sudo cryptsetup remove "$tc_volume_name" &&
        sudo losetup -d "$loop" &&
          echo Unmount successful ||
          echo Unmount failed
    done
    ;;
esac
